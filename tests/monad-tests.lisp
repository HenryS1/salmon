(defpackage :monad-tests
  (:use :cl :rove :monad))

(in-package :monad-tests)

(deftest test-mdo
  (testing "mdo processes maybe values"
    (ok (eq (mdo (a (maybe:just 10))
                    (b (maybe:just 11))
                    (c nil)
                    (yield (+ a b c)))
               nil)
        "mdo short circuits when a nil value occurs")
    (ok (typep (mdo (a (maybe:just 6))
                    (b (maybe:just 4))
                    (yield (+ a b)))
               'maybe:just)
        "mdo returns just when no nils occur in a comprehension")
    (ok (equalp (mdo (a (maybe:just 6))
                     (b (maybe:just 4))
                     (yield (+ a b)))
                (maybe:just 10))
        "mdo unwraps values from just")
    (ok (equalp (mdo (a (maybe:just 7))
                     (let (b 2))
                     (yield (+ a b)))
                (maybe:just 9))
        "mdo binds one value in a let clause")
    (ok (equalp (mdo (a (maybe:just 7))
                     (let (b 2) (c 1))
                     (yield (+ a b c)))
                (maybe:just 10))
        "mdo binds multiple values in a let clause")
    (ok (equalp (mdo (a (maybe:just 7))
                     (let (b 3))
                     (c (maybe:just 2))
                     (let (d 1))
                     (e (maybe:just 9))
                     (yield (+ a b c d e)))
                (maybe:just 22))
        "mdo binds values in multiple let clauses")))
